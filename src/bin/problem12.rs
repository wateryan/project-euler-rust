// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

fn main() {
    const MAX: u64 = 500;
    for i in 1.. {
        let tri = get_triangle_number(i);
        if get_divisor_count(tri) >= MAX {
            println!("{:?}", tri);
            break;
        }
    }
}

fn get_triangle_number(n: u64) -> u64 {
    return n * (n + 1) / 2;
}

fn get_divisor_count(n: u64) -> u64 {
    let mut divs = 2;
    let root: u64 = (n as f64).sqrt() as u64;
    for i in 2..root {
        if n % i == 0 {
            divs += 2;
        }
    }
    return divs;
}

#[test]
fn test_get_traingle_number() {
    assert_eq!(28, get_triangle_number(7));
}

#[test]
fn test_get_divisor_count() {
    assert_eq!(6, get_divisor_count(28));
}
